/*
 * Copyright (c) 2007, 2008, 2009, 2010, ETH Zurich.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Haldeneggsteig 4, CH-8092 Zurich. Attn: Systems Group.
 */

interface intermon "The Interface between monitors" {

        /* XXX Aliases for base system types */
        alias coreid_t uint8;
        alias chanid_t uint32;
        
        /* Types which we may need to change at some point, especially
            on a heterogeneous platform, or 32-bit only platform */
        alias con_id_t uint64;
        alias mon_id_t uint64;
        alias state_id_t uint64;
        alias vci_t uint64;

        alias capid_t uint32;

        /* XXX depends on MAX_COREID and definition of coremask_t in types.h */
        typedef uint64 coremask[4];

        /* Struct to marshal caps between cores */
        typedef struct {
            uint64 w0;
            uint64 w1;
            uint64 w2;
            uint64 w3;
        } caprep;

        message spawnd_image_request();
        message spawnd_image_reply(genpaddr base, uint32 bytes);

        message monitor_initialized();

        message trace_caps_request();
        message trace_caps_reply(caprep cap);

        message mem_serv_iref_request();
        message mem_serv_iref_reply(iref iref);

        message ramfs_serv_iref_request();
        message ramfs_serv_iref_reply(iref iref);

        message name_serv_iref_request();
        message name_serv_iref_reply(iref iref);

        message monitor_mem_iref_request();
        message monitor_mem_iref_reply(iref iref);

        message bind_monitor_request(coreid_t core_id, caprep cap);
        message bind_monitor_reply(errval err);
        message bind_monitor_proxy(coreid_t dst_core_id, caprep cap);

        message bind_monitor_request_scc(coreid_t core_id,
                                         caprep cap,
                                         chanid_t chan_id,
                                         coreid_t from_core_id);
        message bind_monitor_reply_scc(errval err,
                                       chanid_t chan_id,
                                       coreid_t core_id);
        message bind_monitor_proxy_scc(coreid_t dst_core_id,
                                       caprep cap,
                                       chanid_t chan_id,
                                       coreid_t core_id);

        message bind_monitor_request_bmp(coreid_t core_id,
                                         chanid_t chan_id,
                                         coreid_t from_core_id);
        message bind_monitor_reply_bmp(errval err,
                                       chanid_t chan_id,
                                       coreid_t core_id);
        message bind_monitor_proxy_bmp(coreid_t dst_core_id,
                                       chanid_t chan_id,
                                       coreid_t core_id);

        message new_monitor_notify(coreid_t core_id);

        message bind_ump_request(iref iref,
                                 mon_id_t mon_id,
                                 uint32 channel_length_in,
                                 uint32 channel_length_out,
                                 genpaddr framebase,
                                 uint8 framebits,
                                 caprep notify);
        message bind_ump_reply(con_id_t con_id,
                               mon_id_t mon_id,
                               errval err,
                               caprep notify);

        message cap_send_request(con_id_t con_id,
                                 capid_t capid,
                                 caprep cap,
                                 errval err,
                                 bool give_away,
                                 bool has_descendents,
                                 coremask on_cores,
				 bool null_cap);

        message span_domain_request(state_id_t state_id,
                                    genpaddr vnodebase,
                                    genpaddr framebase,
                                    uint8      framebits);
        message span_domain_reply(state_id_t state_id, errval err);

	// Resource control
	message rsrc_join(rsrcid id, coreid_t coreid);
	message rsrc_join_complete(rsrcid id);
	message rsrc_phase_data(rsrcid id, uint32 phase, uint8 data[len]);
	message rsrc_timer_sync(uint64 timestamp);
	message rsrc_timer_sync_reply(errval err);

	// Change to given resource phase.
	// timestamp is the time (as the scheduler counts it) when the
	// message was sent, so other cores know what to relate
	// relative timestamps to.
	message rsrc_phase(rsrcid id, uint32 phase, uint64 timestamp);
	
    /* Multi-hop interconnect driver */
	
    // request portion of routing table from another monitor
    call multihop_routing_table_request(coreid source_coreid);
    response multihop_routing_table_response(errval err,
                                             coreid source_coreid,
                                             coreid max_coreid,
                                             coreid to[len]);

    // grow the routing table to a set of desination cores, via a given forwarder
    message multihop_routing_table_grow(coreid forwarder, coreid destinations[len]);

    // set up a new multihop virtual circuit
    message bind_multihop_intermon_request(iref iref, vci_t sender_vci, coreid core_id);
    message bind_multihop_intermon_reply(vci_t receiver_vci, vci_t sender_vci, errval err);

    message multihop_message(vci_t vci, uint8 direction, uint8 flags, uint32 ack, uint8 payload[size]);
    message multihop_cap_send(vci_t vci, uint8 direction, capid_t capid, errval err, caprep cap, bool null_cap);

    /* Tracing Framework */

    // Notify a core that it should prepare the tracing state. The origin core
    // is the one who initiated the preparation request.
    message trace_prepare(coreid origin_core);

    // Notify the core who initiated the preparation that it is finished.
    message trace_prepare_finished();

    // Notify core 0 that you want to make a time measurement (Network Time
    // Protocol). The origin core is the one who initiated the trace preparation.
    call trace_measure(coreid_t origin_core, uint64 t0);

    // The response to a measurement call from a core.
    response trace_measure_ack(coreid origin_core, uint64 t0, uint64 t1, uint64 t2);

    /* bfscope - the tracing server */

    // Forward a trace-flush command to the monitor on the core on which bfscope
    // is running.
    call bfscope_flush_send_forward(iref iref);

    // This message is sent, once bfscope has finished flushing.
    response bfscope_flush_ack_forward();
};
